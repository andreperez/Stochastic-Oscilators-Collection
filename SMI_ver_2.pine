// @version=4
// @author=André Eduardo Pérez Álvarez (andre_007)
// Thanks to original author: Alex Orekhov (everget)
// Stochastic Momentum Index script may be freely distributed under the MIT license.
study("Stochastic Momentum Index", shorttitle="SMI", resolution="")

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------
// Levels
float LEVEL_STRONG_1 = 5
float LEVEL_STRONG_2 = 10
float LEVEL_STRONG_3 = 15
float LEVEL_STRONG_4 = 20
float LEVEL_STRONG_5 = 25

float LEVEL_WEAK_1 = -5
float LEVEL_WEAK_2 = -10
float LEVEL_WEAK_3 = -15
float LEVEL_WEAK_4 = -20
float LEVEL_WEAK_5 = -25

// Colors
color C_LEVEL_STRONG_5 = #228B22
color C_LEVEL_STRONG_4 = #2BB02B
color C_LEVEL_STRONG_3 = #3ACF3A
color C_LEVEL_STRONG_2 = #5FD85F
color C_LEVEL_STRONG_1 = #84E184

color C_LEVEL_WEAK_5 = #6C0BA9
color C_LEVEL_WEAK_4 = #880ED4
color C_LEVEL_WEAK_3 = #A020F0
color C_LEVEL_WEAK_2 = #B24BF3
color C_LEVEL_WEAK_1 = #C576F6

color C_TRANSPARENT = color.new(color.white, 100)

color C_OVERSOLD_AREA = color.new(#228B22, 70)
color C_OVERBOUGHT_AREA = color.new(#A020F0, 70)

color C_OVERSOLD_SIGNAL = color.new(color.lime, 70)
color C_OVERBOUGHT_SIGNAL = color.new(color.fuchsia, 70)

color C_TREND_BULL = color.new(color.green, 30)
color C_TREND_BEAR = color.new(color.purple, 30)

color C_SMI = color.new(#ff3e7d, 0)
color C_SIGNAL = color.new(#3c78d8, 0)

//-----------------------------------------------------------
// Type of Moving Averages
//-----------------------------------------------------------

var string SMA  = "Simple"
var string EMA  = "Exponential"
var string DEMA = "Double Exponential"
var string TEMA = "Triple Exponential"
var string WMA  = "Weighted"
var string SMMA = "Smoothed"
var string LSMA = "Least Squares"
var string HMA  = "Hull"
var string ALMA = "Arnaud Legoux"

//------------------------------------------------------------------------------
// Functions
//------------------------------------------------------------------------------
f_color_histogram(value) =>
    color _color = na    

    if value >= LEVEL_STRONG_5
        _color := C_LEVEL_STRONG_5
    else if value >= LEVEL_STRONG_4
        if value > value[1]
            _color := C_LEVEL_STRONG_5
        else
            _color := C_LEVEL_STRONG_4
    else if value >= LEVEL_STRONG_3
        if value > value[1]
            _color := C_LEVEL_STRONG_4
        else
            _color := C_LEVEL_STRONG_3    
    else if value >= LEVEL_STRONG_2
        if value > value[1]
            _color := C_LEVEL_STRONG_3
        else
            _color := C_LEVEL_STRONG_2
    else if value > 0        
        if value > value[1]
            _color := C_LEVEL_STRONG_2
        else
            _color := C_LEVEL_STRONG_1
    else if value <= LEVEL_WEAK_5
        _color := C_LEVEL_WEAK_5
    else if value <= LEVEL_WEAK_4
        if value < value[1]
            _color := C_LEVEL_WEAK_5
        else
            _color := C_LEVEL_WEAK_4
    else if value <= LEVEL_WEAK_3
        if value < value[1]
            _color := C_LEVEL_WEAK_4
        else
            _color := C_LEVEL_WEAK_3
    else if value <= LEVEL_WEAK_2
        if value < value[1]
            _color := C_LEVEL_WEAK_3
        else
            _color := C_LEVEL_WEAK_2
    else
        if value < value[1]
            _color := C_LEVEL_WEAK_2
        else
            _color := C_LEVEL_WEAK_1

f_sma(_src, _len) =>
    out = sma(_src, _len)

f_ema(_src, _len) =>
    out = ema(_src, _len)

f_dema(_src, _len) =>
    e1 = ema(_src, _len)
    e2 = ema(e1, _len)
    out = 2 * e1 - e2

f_tema(_src, _len) =>
    ema1 = ema(_src, _len)
    ema2 = ema(ema1, _len)
    ema3 = ema(ema2, _len)
    out = 3 * (ema1 - ema2) + ema3

f_wma(_src, _len) =>
    out = wma(_src, _len)

f_smma(_src, _len) =>
    smma = 0.0
    smma := na(smma[1]) ? sma(_src, _len) : (smma[1] * (_len - 1) + _src) / _len

f_lsma(_src, _len) =>
    out = linreg(_src, _len, 0)

f_hullma(_src, _len) =>
    out = wma(2*wma(_src, _len/2)-wma(_src, _len), floor(sqrt(_len)))

f_alma(_src, _len, _alma_offset, _alma_sigma) =>
    out = alma(_src, _len, _alma_offset, _alma_sigma)    

f_average(_type_ma, _src, _len, _alma_offset, _alma_sigma) =>
    if _type_ma == SMA
        f_sma(_src, _len)
    else if _type_ma == EMA
        f_ema(_src, _len)
    else if _type_ma == DEMA
        f_dema(_src, _len)
    else if _type_ma == TEMA
        f_tema(_src, _len)
    else if _type_ma == WMA
        f_wma(_src, _len)
    else if _type_ma == SMMA
        f_smma(_src, _len)      
    else if _type_ma == LSMA
        f_lsma(_src, _len)
    else if _type_ma == HMA
        f_hullma(_src, _len)
    else if _type_ma == ALMA
        f_alma(_src, _len, _alma_offset, _alma_sigma)    
        
//------------------------------------------------------------------------------
// Inputs
//------------------------------------------------------------------------------
length = input(title="Stochastic Lookback", type=input.integer, defval=20, minval=1)
smoth_len_1 = input(title="1st Smoothing Length", type=input.integer, defval=5, minval=1)
smoth_len_2 = input(title="2nd Smoothing Length", type=input.integer, defval=5, minval=1)
signal_Length = input(title="Signal Smoothing Length", type=input.integer, defval=5, minval=1)

i_type_ma_smi = input(EMA, "Moving Average Type for SMI", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA])
i_type_ma_signal = input(EMA, "Moving Average Type for Signal", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA])

obLevel = input(title="Overbought Level", type=input.integer, defval=40)
osLevel = input(title="Oversold Level", type=input.integer, defval=-40)
maxLevel = input(title="Max Level", type=input.integer, defval=100)
minLevel = input(title="Min Level", type=input.integer, defval=-100)
src = input(title="Source", type=input.source, defval=close)

showHistogram = input(title="Show Histogram ?", type=input.bool, defval=true)
highlightCrossovers = input(title="Highlight SMI/Signal Crossovers ?", type=input.bool, defval=false)
applyFilling = input(title="Apply Ribbon Filling ?", type=input.bool, defval=true)

//-----------------------------------------------------------
// Params for Arnaud Legoux Moving Average (ALMA)
//-----------------------------------------------------------
var string GROUP_ALMA = "Exclusive for Arnaud Legoux Moving Average (ALMA)"
alma_offset = input(title="Offset", type=input.float, defval=0.85, group=GROUP_ALMA, inline="04", tooltip="This offset is considered in the formula, not in the graphic! Offset is the Gaussian applied to the combo line and it is 0.85 by default. Setting offset at 1 makes it fully aligned to the current price just like the exponential moving average. While setting it to zero makes it just like a simple moving average. Traders may try offset combinations according to their own needs and preferences.")
alma_sigma = input(title="Sigma", type=input.float, defval=6, group=GROUP_ALMA, inline="04", tooltip="The standard deviation applied to the combo line. It makes the combo line sharper.")

//------------------------------------------------------------------------------
// Calcs
//------------------------------------------------------------------------------
_highest = highest(length)
_lowest = lowest(length)

x = src - 0.5 * (_highest + _lowest)
y = _highest - _lowest

numerator = f_average( i_type_ma_smi, f_average(i_type_ma_smi, x, smoth_len_1, alma_offset, alma_sigma), smoth_len_2, alma_offset, alma_sigma )
denominator = 0.5 * f_average( i_type_ma_smi, f_average(i_type_ma_smi, y, smoth_len_1, alma_offset, alma_sigma), smoth_len_2, alma_offset, alma_sigma )

smi = 100 * numerator / denominator
signal = f_average(i_type_ma_signal, smi, signal_Length, alma_offset, alma_sigma)
histogram = smi - signal

//------------------------------------------------------------------------------
// Dynamic Colors
//------------------------------------------------------------------------------
histColor = f_color_histogram(histogram)
trendColor = smi > signal ? C_TREND_BULL : C_TREND_BEAR
smiColor = applyFilling ? trendColor : C_SMI
signalColor = applyFilling ? trendColor : C_SIGNAL

//------------------------------------------------------------------------------
// Levels
//------------------------------------------------------------------------------
// -- Max\Overbought
obLevelLine = hline(obLevel, title="Overbought Level", linestyle=hline.style_dashed, color=C_TRANSPARENT)
obLevelPlot = plot(obLevel, title="Overbought Level", style=plot.style_line, color=C_TRANSPARENT)
maxLevelLine = hline(maxLevel, title="Max Level", linestyle=hline.style_dashed, color=C_TRANSPARENT)
maxLevelPlot = plot(maxLevel, title="Max Level", style=plot.style_line, color=C_TRANSPARENT)

hline(0, title="Zero Level", linestyle=hline.style_dotted, color=color.new(color.gray, 50))

// -- Min\Oversold
osLevelLine = hline(osLevel, title="Oversold Level", linestyle=hline.style_dashed, color=C_TRANSPARENT)
osLevelPlot = plot(osLevel, title="Oversold Level", style=plot.style_line, color=C_TRANSPARENT)
minLevelLine = hline(minLevel, title="Min Level", linestyle=hline.style_dashed, color=C_TRANSPARENT)
minLevelPlot = plot(minLevel, title="Min Level", style=plot.style_line, color=C_TRANSPARENT)

// -- Fills
fill(obLevelPlot, maxLevelPlot, color=C_TRANSPARENT)
fill(obLevelLine, maxLevelLine, color=C_OVERBOUGHT_AREA)
fill(osLevelPlot, minLevelPlot, color=C_TRANSPARENT)
fill(osLevelLine, minLevelLine, color=C_OVERSOLD_AREA)

//------------------------------------------------------------------------------
// Plots
//------------------------------------------------------------------------------
// -- Plot Histogram, SMI and Signal
plot(showHistogram ? histogram : na, title="Histogram", style=plot.style_columns, color=histColor)
smiPlot = plot(smi, title="SMI", color=smiColor)
signalPlot = plot(signal, title="Signal", color=signalColor)

//-- Apply filling background between SMI and Signal line's
fillColor = applyFilling ? trendColor : C_TRANSPARENT
fill(smiPlot, signalPlot, color=fillColor)

// -- Crossover
plotshape(highlightCrossovers and crossover(smi, signal) ? smi : na, title="Crossover", location=location.absolute, style=shape.circle, size=size.tiny, color=color.new(color.green, 0))
plotshape(highlightCrossovers and crossunder(smi, signal) ? smi : na, title="Crossunder", location=location.absolute, style=shape.circle, size=size.tiny, color=color.new(color.purple, 0))

// -- Highlight Oversold signal region
fill(signalPlot, obLevelPlot, color=(signal > obLevel ? C_OVERBOUGHT_SIGNAL : na) )
fill(signalPlot, osLevelPlot, color=(signal < osLevel ? C_OVERSOLD_SIGNAL : na) )
